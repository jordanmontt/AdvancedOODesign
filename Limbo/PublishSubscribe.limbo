Context
 ========
    I am implementing a publisher subscriber simple implementation for communicating windows and not windows elements
1- 
    Subcontext
    ===========
    I need a broker that put things together (that holds topics, and concrete connections between entities interested on publishing with those interested on subscribe). 
    I want to avoid the usage of singleton. The best i could do so far is using SpApplication holding my broker instance. Still is kind of singleton fashion. 

    Problem
    ========
    How do we set up a namespace for applications that is not necessary tangled to a process?
2- 
    Subcontext
    ===========
    A subscriber allows the user to define a callable thing. We have multiple options: #symbol, Message, MessageSend, block.  I am more likely to prefere Message since it encapsulates the symbol and it does not hold a receiver. 

    Problem
    ========
    But there are many drawbacks: 
            Message may not be considered as a sender by our tools and more Message makes the tool highly verbose.
3- 
    Subcontext
    ===========
    During the creation of a subscription to a specific topic, i have a period of creation. The creation now a days is delegated to the topic. The topic may be configured to hold the last message transmited in the context of this topic and transmit-it to new-coming subscriptions. 

    Problem
    ========
    The problem is that the subcription allows the user to configure a hook for "onRead" and "onError". A clean way out to avoid errors is to add a "ready" method to the subscription: once the user is finished configuring the hooks, the user must send a message #ready to inform that the subscription is fully configured and ready to receive information. Other option is to have methods that have all the configurations of a subscription as parameters, but this ends up in a dirty API that restricts the usage of the real API behind.  Other option would be to ask the user to build the object by him self (or builder) and install it into the broker once is ready. This one is the cleanest probably, but really verbose and adds much complexity for really simple use case.