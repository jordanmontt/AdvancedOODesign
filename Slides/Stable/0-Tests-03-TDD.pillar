{
	"title":"Test-Driven Development",
	"subtitle":"Getting more out of tests",
	"slidesid":" ",
	"author":"S. Ducasse"
}


${slide:title=Outline}$

- Example of TDD
- Rethinking it

${slide:title=TDD is about the flow}$

- Write test first! Yes, yes, yes

- "'Whenever you are tempted to type something into a print statement or a debugger expression, write it as a test instead'" - Martin Fowler

${slide:title=TDD: Write your test}$

Imagine we just created the class ==Counter==

[[[
CounterTest >> testCount 
	| c |
	c := Counter new. 
	c count: 10.
	self assert: c count equals: 12
]]]

${slide:title=TDD: Run your test!}$

- It is red (the test produces an error)
-- This is normal since we did not define the methods ==count== and ==count:==.
- So far so good!
- If it is already green this is a bonus and may be your test is not good.

${slide:title=TDD: Make your test pass}$

- Work until your test gets green!
- [When you are lucky, use XTDD and enjoy coding in the debugger]

${slide:title=TDD: Rerun **all** the tests}$

- You are super smart but **run all your tests**!
- Fix the broken tests
-- Either a test is now wrong
-- Or you broke something else and you should fix it

${slide:title=TDD: When all the tests are green}$
- Commit and take a break
- Then it is a good time to 
-- Refactor your code if necessary
-- Revisit your code

${slide:title=Why writing test first?}$

- You specify what you want to get
- In addition you are your first client: strengthen your APIs
- You get a ""clear"" context
- You can debug on the spot


${slide:title=Conclusion}$

- TDD is powerful
- XTDD is even more (see following lectures)