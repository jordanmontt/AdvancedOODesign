{
	"title":"About Fluid API",
	"subtitle":"The case of the class definition",
	"author":"S. Ducasse",
	"slidesid":"2022"
}


${slide:title=Goal}$

- Think modular
- Looking at the class definition printer
- Fluid API

${slide:title=Context: Class Definition }$

- How to support the evolution of class definition
- Supporting package, various formats, slots
- Without parameter explosion

${slide:title=Historically: a Class Definition in ST-80}$

[[[
ArrayedCollection variableSubclass: #Array
	instanceVariableNames: ''''
	classVariableNames: ''''
	poolDictionaries: ''''
	category: ''Collections-Sequenceable-Base'''
]]]


${slide:title=Pharo up to Pharo 90}$

- Avoid poolDictionaries: when not used, but still...
- Supports package

[[[
ArrayedCollection variableSubclass: #Array
	instanceVariableNames: ''''
	classVariableNames: ''''
	package: ''Collections-Sequenceable-Base''
]]]

[[[
Object subclass: #Point
	instanceVariableNames: ''x y''
	classVariableNames: ''''
	package: ''Kernel-BasicObjects'''
]]]

${slide:title=Method Parameter Explosion}$

Modern class definition should support: 
- Packages, tags, slots, 
- New kind of subclasses: ephemerons,....
- Challenge: How to support new information without method parameter combinatory explosion?


${slide:title=Using Fluid API}$

- Using a fluid API (cascade instead of mandatory parameters)
- Only the necessary parameters
- Composable
- Extensible
- Supporting complex slots (first class instance variables)

${slide:title=(Example of Fluid API)}$

A message
[[[
	x foo: aString bar: anotherString babar: aThirdString
]]]

becomes

[[[
	x
		foo: aString;
		bar: anotherString;
		babar: aThirdString
]]]

or 

[[[
	x
		babar: aThirdString;
		foo: aString
]]]

or 
[[[
	x foo: aString
]]]


${slide:title=Fluid class definition in Pharo}$

[[[
ArrayedCollection << #Array
	layout: VariableLayout;
	tag: 'Base';
	package: 'Collections-Sequenceable'
]]]

[[[
Object class << Point class
	package: 'Kernel'
]]]

- Modular
- Compact
- Extensible

${slide:title=Supporting Complex Slots}$

- Previous Pharo class definition did not support well slots

[[[
SpAbstractWidgetPresenter << #SpDiffPresenter
	slots: {
			#showOptions => SpObservableSlot .
			#showOnlyDestination => SpObservableSlot .
			#showOnlySource => SpObservableSlot .
			#contextClass => SpObservableSlot .
			#leftLabel => SpObservableSlot .
			#leftText => SpObservableSlot .
			#rightLabel => SpObservableSlot .
			#rightText => SpObservableSlot };
		tag: 'Widgets';
		package: 'Spec2-Core'
]]]


${slide:title=Supporting Traits}$

[[[
Trait << #TTranscript
	package: 'Transcript-Core-Traits'
]]]



${slide:title=Two specific roles}$

There is a need:
- to create a kind of accumulator (an holder of arguments)
- to perform an action once the arguments are passed around

[[[
SpAbstractWidgetPresenter << #SpDiffPresenter
	... 
	...
	package: 'Spec2-Core'
]]]

- ==< <== creates a class builder
- ==package:== tells the builder to install the configured class


${slide:title=Analysis of Fluid API}$

""Pros:""
- Handles combinatorial explosion
- Handles optional argument

""Cons:""
- The message order can be important
- There is a need for a closing message (==package:==)


${slide:title=Conclusion}$

- Fluid API is nice when we face many optional/exclusive parameters
- Still always think about the builder and closing message. 

