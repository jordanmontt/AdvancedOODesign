{
	"title":"About super",
	"slidesid":"M1S5"
}

${slide:title=Goals}$

- Sending a message
- Method lookup
- ==super== semantics and the differences with ==self==

${slide:title=Define what super is!}$

${columns}$

${column:width=50}$

+>file://figures/LookupWithSuperInSuperclassMethodThreeClasses.pdf|width=85+

${column:width=50}$

Take 5 min and write the definition of ==super==

- your definition should have two points:
-- what does ==super== represent?
-- how is a method looked up when a message is sent to ==super==?

${endColumns}$

${slide:title=Challenge yourself with super!}$

${columns}$

${column:width=80}$

+>file://figures/LookupWithSuperInSuperclassMethodThreeClasses.pdf|width=85+

${column:width=30}$

[[[
> aA bar
...
> aB bar
...
> aC bar
...
]]]

${endColumns}$

${slide:title=Challenge yourself with super!}$

${columns}$

${column:width=80}$

+>file://figures/LookupWithSuperInSuperclassMethodThreeClasses.pdf|width=85+

${column:width=30}$

[[[
> aA bar
10
> aB bar
20
> aC bar
100
]]]

${endColumns}$

${slide:title=super changes where the lookup starts}$

${columns}$

${column:width=54}$

+>file://figures/LookupWithSuperInSuperclassMethodThreeClasses.pdf|width=100+

${column:width=46}$

Evaluation of ==aC bar==
#==aC=='s class is ==C==
#no method ==bar== in C
#look up in ==B== - ==bar== is found
#method ==bar== is executed
#==bar== is sent to ==super==
#==super== is ==aC== but lookup starts in ==A==
#==bar== is found in ==A== and executed
#==foo== is sent to ==aC==
#==foo== is found in ==C==

${endColumns}$

${slide:title=super changes where the lookup starts}$

- ==super== refers to the ""receiver"" of the message (just like ==self==)
- The method lookup starts .......................................... (Take 1 min to fill the dots)


${slide:title=super in two sentences}$

- ==super== refers to the receiver of the message (just like ==self==)
- The method lookup starts in the superclass of ""the class containing the ==super== expression""

${slide:title=self is dynamic}$

${columns}$

${column:width=45}$

+>file://figures/LookupWithSelfInSuperclassMethod.pdf|width=90+

${column:width=55}$

- At compilation time, we ""don't"" know 
- to which object ==self== points to
- to which ==foo== method ==bar== refers to

Imagine that we load a new subclass ==C== of ==B== and do ==C new bar==, ==self== will be pointing to such instance


${endColumns}$

${slide:title=super is static}$

${columns}$

${column:width=50}$

+>file://figures/superIsStatic.pdf|width=65aA+

${column:width=50}$

- At ""compilation-time"", we know that ==B>>foo== refers to ==A>>foo==
- we should look above the class containing the ""method"" using ==super==

${endColumns}$

${slide:title=Even some books got it wrong}$

- ""Wrong"" definition: ''==super== looks for the method in the superclass of the ""receiver""'s class''
- With this definition, this example would loop forever:

+>file://figures/LookupWithWrongDefinition.pdf|width=50+

In reality it ""does not"" loop, the definition is wrong

${slide:title=What you should know}$

- ==self== always represents the receiver
- ==super== always represents the receiver
- ==super== changes the lookup:
-- a super send starts the lookup in the class above it
- self sends act as a hook: code of subclasses may be invoked (see Lectures for more)
