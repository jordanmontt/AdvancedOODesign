{
	"title":"About Null Check",
	"subtitle" : "The case of lazy initialization",
	"slidesid":"M7S1"
}


${slide:title=Goals}$

- Think about object initialization
- Present Lazy initialization

${slide:title=Problem}$

- Reduce startup time
- How can we do less at the beginning?
- Sometimes you do not want to be forced to initialize all the state at instance creation time

${slide:title=Solution}$

- Only perform initialization if the state is used
- Delay initialization until needed

${slide:title=Lazy initialization}$

- Let ==nil== value in instance variable
- Do not initialize instance variable at instantiation time
- Do not access instance variable directly
- Only access instance variable via a lazy accessor

[[[
MyObject >> x
	^ x ifNil: [ x := 0]
]]]



${slide:title=Use Lazy Initialization when Necessary}$

You can defer initialization of a variable to its first use:

[[[
FreeTypeFont >> descent
   ^ cachedDescent ifNil: [
        cachedDescent := (self face descender * self pixelSize //
                               self face unitsPerEm) negated ]
]]]

- This is only when the method ==descent== is executed that ==cachedDescent== will be initialized

${slide:title=Solution: Use Lazy Initialization when Necessary}$

- Defers initialization and caches the result
- Pay attention you should NOT access directly an instance variable used in a lazy setting 
- You should always use this accessor
- Else you can get exposed to ==nil== value

${slide:title=Conclusion}$

- Lazy initialization is another tool at hand
- Don't over use it

