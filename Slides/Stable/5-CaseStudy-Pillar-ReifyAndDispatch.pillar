{
    "title":"Reification and delegation",
    "subtitle":"Microdown in Pillar case study",
    "author":"S. Ducasse"
}


${slide:title=Goals}$

- Creating specific objects supports delegation
- Delegation creates ""dispatch"" spaces (Strategy Design Pattern)
- Study a concrete case: Pillar handing now Microdown format
- Think about modularity


${slide:title=Case study: introducing .md file in Pillar}$


""Existing""
- Pillar is a document compilation chain to produce books, slides, sites
- Pillar used .pillar file containing Pillar text
""New requirement"": Now Pillar should handle .md files containing Microdown text
- How to support this new requirement?

${slide:title=Pillar's .pillar file management}$

How to get a document parsed?
- We ask the parser!
- The parser turns pillar file into a document tree
- There is ""only one"" parser associated to a document

[[[
PRDocument parser parseFile: aFileReference
]]]

- It avoids to hardcode ==PRParser== everywhere 
- Worked to substittute different versions of PetitParser parser


${slide:title=Case study: Pillar supports .pillar }$

[[[	
PRAbstractOutputDocument >> buildOn: aPRProject 

	| parsedDocument transformedDocument writtenFile |
	parsedDocument := self parseInputFile: file.
	transformedDocument := self transformDocument: parsedDocument.
	writtenFile := self writeDocument: transformedDocument.
	self postWriteTransform: writtenFile.
	^ PRSuccess new.
]]]

[[[	
PRAbstractOutputDocument >> parseInputFile: anInputFile
	^ PRDocument parser parse: anInputFile file	
]]]

${slide:title=Problems}$

- ==PRDocument parser== looks like a disguised global variable
- Only one syntax
- Checks for the file extension are hardcoded
- Difficult to know if a file is part of a project (books)
- Access to project configuration (user option) is cumbersome

${slide:title=Solution: Introduce InputDocument}$

First step:
- Instead of manipulating files, manipulate InputDocument objects
- InputDocument wrap files and more information (file extension, parser...)

${slide:title=Step 1: Introduce InputDocument}$

[[[
PRBuilAllStrategy >> filesToBuildOn: aProject

	^ children flatCollect: [ :each |
		each allChildren
			select: [ :file | file isFile and: [ file extension = 'pillar' ] ]
			thenCollect: [ :file | 
				PRInputDocument new
					project: aProject;
					file: file;
					yourself ] ]
]]]

[[[			
PRInputDocument >> parser
	file extension = 'pillar'
		ifTrue: [ ^ PRDocument parser ].
	self error: 'No parser for document extension: ', file extension
]]]

${slide:title=First step }$

- We do not distribute responsibility

[[[
... select: [ :file | file isFile and: [ file extension = 'pillar' ] ]
]]]

- Not modular!



${slide:title=Support for .mic/.md files}$

- Now Pillar compilation chain should accept .md file
- Different syntax!
- Different parser!

${slide:title=Refining InputDocument into a simple hierarchy}$

- Different classes
- Move behavior to such classes

+.>file://figures/PillarInputFile.pdf|width=80+

[[[
PRInputDocument << #PRPillarInputDocument
	package: 'Pillar-ExporterCore'
]]]

${slide:title=InputFile is now responsible for its parser}$

[[[
PRAbstractOutputDocument >> parseInputFile: anInputFile	
	^ anInputFile parsedDocument
]]]

[[[
PRPillarInputDocument >> parsedDocument
	^ self parserClass parse: file contents
	
PRPillarInputDocument >> parserClass
	^ PRDocument parser 
]]]

[[[
PRMicrodownInputDocument >> parsedDocument
	^ (self parserClass parse: file contents) asPillar
	
PRMicrodownInputDocument >> parserClass
	^ Microdown parser
]]]

${slide:title=Delegating extension checks}$

[[[		
PRPillarInputDocument >> doesHandleExtension: anExtension
	^ anExtension = 'pillar'		
]]]

[[[
PRMicrodownInputDocument >> doesHandleExtension: anExtension
	^ anExtension = 'mic'
]]]

${slide:title=Registration mechanism to support modularity}$

- We need to create objects of the right kind
- We use a registration mechanism, so that input documents can declare their existence

[[[
PRInputDocument class >> inputClassForFile: aFile
	
	^ self subclasses
			detect: [ :each | each doesHandleExtension: aFile extension ]
			ifNone: [ PRNoInputDocument  ]
]]]

- Registration could be better (check corresponding lecture)


${slide:title=Creating the right kind of InputDocument objects}$

Now we are ready to create the adequate InputDocument objects

[[[
PRBuilAllStrategy >> filesToBuildOn: aProject

	^ files collect: [ :file | 
		(PRInputDocument inputClassForFile: file asFileReference) new
			project: aProject;
			file: (aProject baseDirectory resolve: file);
			yourself ]
]]]

${slide:title=Conclusion}$

- Turning implicit into an object
- Turning one object into objects of different but polymorphic classes
- Defining polymorphic behavior to be able to delegate 
- Using registration to create modular design
 



