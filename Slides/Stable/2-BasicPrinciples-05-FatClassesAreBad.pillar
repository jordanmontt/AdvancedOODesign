{
    "title":"Fat classes are bad",
   "subtitle":"a.k.a. a large class vs. a class hierarchy",
    "author":"S. Ducasse"
}

${slide:title=Goal}$

- Remember the ''Implementing Not'' Lectures
- Transform Self Type Check Reengineering pattern


${slide:title=Example: BibTeX}$

[[[
@inproceedings{Scha03a,
  author = {N. Schaerli and S. Ducasse and O. Nierstrasz and A. P. Black},
  title = {Traits: Composable Units of Behavior},
  booktitle = {ECOOP},
  publisher = {Springer Verlag},
  year = {2003}}

@article{Teso20b,
  author = {P. Tesone and S. Ducasse and G. Polito and L. Fabresse ...},
  title = {A new modular implementation for Stateful Traits},
  journal = {Science of Computer Programming}, ...}

 @book{Duca22a,
    author = {S. Ducasse and G. Rakic and  ...},
    title = {Pharo by Example},
    publisher = {Keepers of the lighthouse},
    url = {http://books.pharo.org}}
]]]

${slide:title=Example: BibTeX}$

- Different entries: inproceedings, book, article, techreport, phd....
- Different fields: key, year, institution, booktitle, title...


${slide:title=A single class in Citezen :(}$

[[[
CZScoped << #CZEntry
	slots: { #type . #key . #fields };
	sharedVariables: { #ExtendedFieldKeys . #FieldKeysToRemove };
	sharedPools: { CZFieldPool };
	package: 'Citezen-Model'
]]]


${slide:title=Consequences}$

[[[
isArticle
	^ self type = #article
]]]

[[[
isBook
	^ self type = #book
]]]

And their senders...

${slide:title=Another example: CZField}$

[[[
CZScoped << #CZField
	slots: { #key . #value };
	package: 'Citezen-Model'
]]]

[[[
CZField >> isDoi
	^ key = #doi
]]]


${slide:title=Consequence}$


[[[
CZField >> visitField: aField
	self outputStream nextPutAll: '<span class="', aField key,'">'.
	aField isPDF
			ifTrue: [outputStream nextPutAll: '<a href="'].
	aField isURL
		ifTrue: [outputStream nextPutAll: '<a href="'].
	aField isDoi
		ifTrue: [outputStream nextPutAll: '<a href="https://doi.org/'].	
	aField dispatchVisitor: self.
	aField isURL
		ifTrue: [outputStream nextPutAll: '">URL</a>'].
	aField isDoi
		ifTrue: [outputStream nextPutAll: '">DOI</a>'].
	aField isPDF
			ifTrue: [outputStream nextPutAll: '">PDF</a>'].
	outputStream nextPutAll: '</span>'.
]]]


${slide:title=When using a Fat class}$

Not having a class hierarchy: 
- Not ""possible to dispatch"" logic because there is only one class 
- Simple extensions require ""many changes"" to the conditional code
- Difficult subclassing ""without duplicating/adapting"" the methods containing the conditional code
- Adding a new behavior always ""results in changes"" to the same set of methods and always results in adding a new case to the conditional code.
- Remember the Implementing Not Lectures

${slide:title=Transform self type transformation}$

+>file://figures/TransformSelfType.png|width=90+


${slide:title=The case of the Memento DP}$

Sometimes you need to be able to edit a temporary version of an object
- Memento allows one to save and reload the state of an object without revealing implementation details
- To have a generic Memento we can use a kind of dictionary to hold field values of the copied object. 

${slide:title=Conclusion}$

- Favor dispatch
- Create classes to encapsulate knowledge
- Tell do not ask

