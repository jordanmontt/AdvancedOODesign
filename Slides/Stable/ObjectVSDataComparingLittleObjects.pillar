{
	"title":"Points as (real) Objects",
	"subtitle":"Comparing APIs",
	"author" : "",
	"slidesid" : "Core"
}

${slide:title=Goals}$

- Looking at two concrete implementations of Point: Java and Pharo
- Understanding the impact of strong API 

${slide:title=Points in Java}$

Without getters and setters

- ==boolean equals(Object obj)== Determines whether or not two points are equal.
- ==void move(int x, int y)== Moves this point to the specified location in the (x,y) coordinate plane.
- ==String toString()== Returns a string representation of this point and its location in the (x,y) coordinate space.
- ==void translate(int dx, int dy)== Translates this point, at location (x,y), by dx along the x axis and dy along the y axis so that it now represents the point (x\+dx,y\+dy).

Inherited from Point2D
- ==distance== and ==clone==

${slide:title=Points in Java}$

Getters and setters:
- ==Point	getLocation()== Returns the location of this point. (well this is to be polymorphic with Component - A location is just a point)
- ==void setLocation(double x, double y)== Sets the location of this point to the specified double coordinates.
- ==void setLocation(int x, int y)== Changes the point to have the specified location.
- ==void setLocation(Point p)== Sets the location of the point to the specified location.
- ==double getX()== Returns the X coordinate of this Point2D in double precision.
- ==double getY()== Returns the Y coordinate of this Point2D in double precision.


${slide:title=Example}$

How to make our robot walks from distance in its current direction (in degree).

[[[
public class Bot {
  int direction = 0;
  Point position = new Point(0,0);
]]]

[[[
  public void go(int distance){
    position = (new Point((Math.round(Math.cos(Math.toRadians(direction))) * distance + position.x()),
          (Math.round(Math.sin(Math.toRadians(direction)) * distance + position.y())))) ;
    }
}
]]]

${slide:title=Analysis}$

- A poor data structure, not an object
- Arithmetic of Points is defined outside of them!
-- Points cannot sum themselves
-- Points cannot shape themselves (rounded, normal, reciprocal,...)
- When an object exposes a shallow API, it favors logic duplication in clients!


${slide:title=BTW Turtle >> go: in Pharo}$

[[[
public void go(int distance){
    position = new Point(
				(Math.round(Math.cos(Math.toRadians(direction))) * distance + position.x()),
          		(Math.round(Math.sin(Math.toRadians(direction)) * distance + position.y ())) ;
    }
}
]]]

In Pharo 

[[[
Bot >> go: aDistance 
	"Return the point that is at a distance aDistance 
	in the direction pointed by the receiver"
	
	position := position + (direction degreeCos @ direction degreeSin * aDistance) rounded
]]]

- Read better
- Add and multiply points
- Stress the logic


${slide:title=Points in Pharo}$

[[[
Point selectors
]]]

- ==normalized==, ==normal==, ==transposed==, ==reflectedAbout:== 
- ==distanceTo:==, ==squaredDistanceTo:== 
- ==crossProduct:==, ==dotProduct:==
- ==\\== \- ==\*==, ==reciprocal==,==/==, ==\+==, == min== ==//== ==abs== ==max==
- ==>=== ==>== ==<=== ==min:max:== ==min:== ==<== ==closeTo:== ==closeTo:precision:== ==max:== ==\===
- ==negated==, ==translateBy:==,  ==scaleBy:==, ==scaleTo:==, ==scaleFrom:to:==, ==adhereTo:==,
- ==triangleArea:with:==, ==to:intersects:to:==, ==to:sideOf:==, ==isInsideCircle:with:with:==, ==sideOf:==
- ==rectangle:==, ==extent:==, ==corner:==


${slide:title=Points in Pharo}$

- ==setR:degrees:==, ==onLineFrom:to:==, ==angleWith:==, ==angle==,  ==onLineFrom:to:within:==, ==rotateBy:about:==, ==degrees==, ==rotateBy:centerAt:==, ==theta==, ==bearingToPoint:==, 
- ==roundUpTo:==, ==ceiling==, ==truncated==, ==truncateTo:==, ==roundTo:==, ==floor==, ==roundDownTo:==, ==rounded==,
- ==quadrantOf:==, ==leftRotated==,  ==nearestPointAlongLineFrom:to:==, ==sortsBefore:==, ==flipBy:centerAt:==,  ==nearestPointOnLineFrom:to:==, ==dotProduct:==, ==squaredDistanceTo:==, ==insideTriangle:with:with:==, ==fourDirections==, ==directionToLineFrom:to:====sign==, ==octantOf:==, ==rightRotated==,
- ==fourNeighbors==, ==grid:==, ==eightNeighbors==, ==fourDirections==

${slide:title=Simple example}$ 

[[[
Point >> abs
	"Answer a Point whose x and y are the absolute values of the receiver's x and y."

	^ x abs @ y abs
]]]

- Simple
- Still a service offered 

${slide:title=Simple example}$ 

[[[
< aPoint 
	"Answer whether the receiver is above and to the left of aPoint."
	"((100@200) < (330@400)) >>> true"
	"((100@200) < (330@100)) >>> false"
	
	^ x < aPoint x and: [y < aPoint y]
]]]


${slide:title=Another simple example}$ 


[[[
Point >> crossProduct: aPoint
	"Answer a number that is the cross product of the receiver and the 
	argument, aPoint."
		^ (x * aPoint y) - (y * aPoint x)
]]]

- Obvious but still useful
- No need to duplicate it in clients

${slide:title=Example: More challenging}$ 

[[[
Point >> degrees
	"Answer the angle the receiver makes with origin in degrees. right is 0; down is 90."
	| tan theta |
	^ x = 0 
		ifTrue: [ y >= 0 
					ifTrue: [ 90.0 ]
					ifFalse: [ 270.0 ] ]
		ifFalse: [ tan := y asFloat / x asFloat.
				theta := tan arcTan.
				x >= 0 
					ifTrue: [ y >= 0 
						ifTrue: [ theta radiansToDegrees ]
						ifFalse: [ 360.0 + theta radiansToDegrees ] ]
				ifFalse: [ 180.0 + theta radiansToDegrees ] ]
]]]

- Nobody wants to be forced to reimplement it. 

${slide:title=Polymorphic}$

[[[
Point >> asPoint
	"Answer the receiver itself."

	^ self
]]]

[[[	
Number >> asPoint
	"Answer a Point with the receiver as both coordinates; often used to 
	supply the same value in two dimensions, as with symmetrical gridding 
	or scaling."

	^ self @ self
]]]

- This way we can manage list of objects and easily convert them to point

[[[
{ 1 . 2 . 3 . 33@33 . 4} collect: [:a | a asPoint]
>> {1@1 . 2@2 . 3@3 . 33@33 . 4@4} 
]]]

${slide:title=Point Arimethic}$

- Points know how to ==\*==, ==\+==, ==\/==, ... themselves
- We can mix points, rectangles, and numbers

[[[
drawString: aString at: aPoint font: aFontOrNil color: aColor
	self
		drawString: aString
		in: (origin + aPoint extent: self clipRect extent)
		font: aFontOrNil
		color: aColor
]]]

${slide:title=Analysis}$

- In Pharo ==Point==s are more than a data structure
- They define potentially complex behavior
- Functionality is pushed from clients to ==Point==
- Point ""offers"" behavior: reuse!


${slide:title=What you should know}$

- Objects are not data structures
- Objects are more that structure
- Objects are about behavior, services they offer
- An object should encapsulate logic and lets its client reuse such logic!
