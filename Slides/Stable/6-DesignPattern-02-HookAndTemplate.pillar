{
  "title":"Hooks and Template",
  "subtitle":"The heart of OOP",
  "author": "S. Ducasse"
}


${slide:title=Remember...}$

- Sending a message is making a choice
- A class defines one possible choice
- Self-sends are plans for reuse (e.g., defines a hook):
-- i.e., a place where subclasses can inject variations

${slide:title=The template method}$

- A template method specifies a skeleton with hooks
- hooks are places to be customized by subclasses
- hooks may or may not have a default behavior

+>file://figures/hookAndTemplate.png|width=85+

${slide:title=printString: A template method}$

[[[
>>> (Delay forSeconds: 10) printString
'a Delay(10000 msecs)'
]]]

${slide:title=printString template method}$

[[[
Object >> printString
   "Answer a String whose characters are a description of the receiver."
   ^ self printStringLimitedTo: 50000
]]]

[[[
Object >> printStringLimitedTo: limit
   | limitedString |
   limitedString := String
                                        streamContents: [ :s | self printOn: s ]
                                        limitedTo: limit.
   limitedString size < limit ifTrue: [ ^ limitedString ].
   ^ limitedString , '...etc...'
]]]

${slide:title=A default hook: printOn:}$

[[[
>>> Node new printString
a Node
]]]
[[[
>>> Apple new printString
an Apple
]]]

Default behavior:
[[[
Object >> printOn: aStream
   "Append to the argument, aStream, a sequence of characters that identifies the receiver."
   | title |
   title := self class name.
   aStream
      nextPutAll: (title first isVowel ifTrue: [ 'an ' ] ifFalse: [ 'a ' ]);
      nextPutAll: title
]]]

${slide:title=printOn: Refinement}$

[[[
>>> (Delay forSeconds: 1) printString
a Delay(1000 msecs)
]]]

Reusing and extending default behavior:
[[[
Delay >> printOn: aStream
   super printOn: aStream.
   aStream
      nextPutAll: '(';
      print: millisecondDelayDuration;
      nextPutAll: ' msecs)'
]]]

${slide:title=printOn: Redefinition}$

[[[
>>> true not printString
false
]]]

Redefinition in ==False==:
[[[
False >> printOn: aStream
   aStream nextPutAll: 'false'
]]]

${slide:title=printOn: Redefinition}$

[[[
>>> 1 to: 100
(1 to: 100)
>>> 1 to: 100 by: 3
(1 to: 100 by: 3)
]]]

Redefinition in ==Interval==:
[[[
Interval >> printOn: aStream
   aStream
      nextPut: $(;
      print: start;
      nextPutAll: ' to: ';
      print: stop.
   step ~= 1
      ifTrue: [ aStream nextPutAll: ' by: '; print: step ].
   aStream nextPut: $)
]]]

${slide:title=Another template method: Object copy}$

Copying objects is complex:
- graph of connected objects
- cycles
- each class may want a different copy strategy
A simple solution for simple cases: ==copy==/==postCopy==

${slide:title=Object >> copy}$

[[[
Object >> copy
  "Answer another instance just like the receiver. Subclasses typically override postCopy. Copy is a template method in the sense of Design Patterns. So do not override it. Override postCopy instead. Pay attention that normally you should call postCopy of your superclass too."
    ^ self shallowCopy postCopy
]]]

[[[
Object >> shallowCopy
  "Answer a copy of the receiver which shares the receiver's instance variables. Subclasses that need to specialize the copy should specialize the postCopy hook method."
  <primitive: 148>
  ...
]]]

${slide:title=Default hook}$

[[[
Object >> postCopy
  "I'm a hook method in the sense of Design Patterns TemplateHook/Methods. I'm called by copy. self is a shallow copy, subclasses should copy fields as necessary to complete the full copy"
  ^ self
]]]

${slide:title=postCopy: Refinement}$

[[[
Collection subclass: #Bag
   instanceVariableNames: 'contents'
   classVariableNames: ''
   package: 'Collections-Unordered'
]]]

[[[
Bag >> postCopy
   super postCopy.
   contents := contents copy
]]]

- ==contents== is a ==Dictionary==
- ==postCopy== recursively invoke copy on dictionary

${slide:title=Dictionary >> postCopy: Deeper copy}$

[[[
Dictionary >> postCopy
   "Must copy the associations, or later store will affect both the original and the copy"
   array := array 
               collect: [ :association |
                          association ifNotNil: [ association copy ] ]
]]]

${slide:title=Conclusion}$

- Hooks and Template is a very common design pattern
- self-send a message defines a hook
- Sending a message to another object opens space for dispatch
- Sending a message increases potential reuse
