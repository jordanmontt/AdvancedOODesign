{
  "title" : "Message Sends are Plans for Reuse",
	    "slidesid":"M3-2"
}

${slide:title=About this lecture}$

- Related to sending a message is making a choice lecture
- Relevant to any object-oriented language
- Another essential aspect of object-oriented design

${slide:title=What you will learn}$

- Message sends are hooks for subclasses
- Message sends are places where subclasses code can be invoked

${slide:title=Let us start to reflect }$

Anecdotes
- ''I like big methods because I can see all the code''
- ''I do not like small methods'' 

Questions
- Why large methods leads to ''under-optimal'' design?
- Why writing small methods is a sign of good design?

${slide:title=Remember...}$

- a message send makes a choice
- a class hierarchy defines the choices
- ==self== ""always represents the receiver""
- method lookup starts in the ""class of the receiver"" (except for super)

+>file://figures/Design-FatVsDispatch.png|width=75+



${slide:title=An example}$

Imagine
[[[
Node >> setWindowWithRatioForDisplay
   | defaultNodeSize |
   defaultNodeSize := mainCoordinate / maximizeViewRatio.
   self window add:
      (UINode new
         with: bandWidth * 55 / defaultWindowSize).
   previousNodeSize := defaultNodeSize.
]]]

What if we want to change the ==defaultNodeSize== formula in a subclass



${slide:title=Duplication as a bad solution}$

Duplicate the code in a subclass

[[[
Node subclass: OurSpecificNode
   ...
]]]

[[[
OurSpecificNode >> setWindowWithRatioForDisplay
  | defaultNodeSize |
  defaultNodeSize :=
     (mainCoordinate / maximizeViewRatio) + 10.
  self window add:
      (UINode new
         with: bandWidth * 55 / defaultWindowSize).
  previousNodeSize := defaultNodeSize.
]]]

${slide:title=Avoid duplication}$

- Duplication is not a good practice:
-- duplication copies bugs
-- changing one copy requires changing others
- Note that in Java-like languages, using ==private== attributes makes duplication in subclasses impossible

${slide:title=A much better solution}$

${columns}$

${column:width=50}$

- Define small methods
- Send messages
- Subclasses can override such methods

${column:width=50}$

+>file://figures/SelfIsDynamic.png|width=70+

${endColumns}$

${slide:title=We can refactor this}$

[[[
Node >> setWindowWithRatioForDisplay
  | defaultNodeSize |
  defaultNodeSize := (mainCoordinate / maximizeViewRatio).
  self window add:
      (UINode new
         with: bandWidth * 55 / defaultWindowSize).
  previousNodeSize := defaultNodeSize.
]]]

${slide:title=Into ...}$

[[[
Node >> setWindowWithRatioForDisplay
   | defaultNodeSize |
   defaultNodeSize := self ratio.
   self window add:
      (UINode new
         with: bandWidth * 55 / defaultWindowSize).
   previousNodeSize := defaultNodeSize.
]]]

[[[
Node >> ratio
   ^ mainCoordinate / maximizeViewRatio
]]]


${slide:title=Subclasses reuse superclass logic}$

[[[
Node >> ratio
   ^ mainCoordinate / maximizeViewRatio
]]]

A subclass can refine the behavior

[[[
OurSpecificNode >> ratio
   ^ super ratio + 10
]]]

${slide:title=Another step}$

[[[
Node >> setWindowWithRatioForDisplay
   | defaultNodeSize |
   defaultNodeSize := self ratio.
   self window add:
      (UINode new
         with: bandWidth * 55 / defaultWindowSize).
   previousNodeSize := defaultNodeSize.
]]]

What if we want have a different ==UINode==.



${slide:title=Another step}$

We can also extract the ==UINode== instantiation.

[[[
Node >> setWindowWithRatioForDisplay
   | defaultNodeSize |
   defaultNodeSize := self ratio.
   self window add: self uiNode.
   previousNodeSize := defaultNodeSize.
]]]

[[[
Node >> uiNode
   ^ UINode new
          with: bandWidth * 55 / defaultWindowSize
]]]

${slide:title=Do not hardcode class use}$

[[[
Node >> uiNode
   ^ UINode new
          with: bandWidth * 55 / defaultWindowSize
]]]

${slide:title=Define methods returning classes}$

[[[
Node >> uiNode
   ^ self uiNodeClass new
        with: bandWidth * 55 / defaultWindowSize.
]]]

[[[
Node >> uiNodeClass
   ^ UINode
]]]

${slide:title=Many small messages}$

Small messages are a sign of good design, because:
- each little method is a potential ""hook"" for customization
- gives name to expressions

Some developers complain about all these small methods
- But small methods are good
- Give meaningful name to methods
- Do not need to read all method definitions

${slide:title=Gruyere-oriented programming}$

+.>file://figures/gruyereWithSlogan|width=95+

${slide:title=Conclusion}$

- Code can be reused and refined in subclasses
- Sending a message in a class defines a ""hook"":
-- i.e., a place where subclasses can ""inject variations""

- Prefer small methods because:
-- this gives names to expressions
-- this gives freedom to subclasses

