{
  "title":"Inheritance Basics",
  "slidesid":"M1-3"
}

${slide:title=Goal}$

- What is inheritance?
- When to use it?
- BTW, Pharo has the same inheritance as Java

${slide:title=Inheritance}$

- It is a reuse mechanism
-- We do not reimplement the code of the superclasses
-- We extend it or customize it
- It is based on the expression of a delta
-- Only specify the differences to the superclasses


${slide:title=The basics}$

${columns}$

${column:width=60}$

- Often, we want small adaptations
- We want to extend existing behavior and state
- We do not want to reimplement everything: We want to reuse
- Solution: ""class inheritance""
- A class extends the definition of its superclass

${column:width=40}$

+>file://figures/InheritanceDiagram.png|width=90+

${endColumns}$

${slide:title=Basic subclass behavior}$

${columns}$

${column:width=60}$

A subclass:
- can ""add"" state and behavior: ==color==, ==borderColor==, ...
- can ""use"" superclass behavior and state
- can ""redefine"" superclass' behavior to ""specialize"" it

${column:width=40}$

+>file://figures/InheritanceDiagram.png|width=90+

${endColumns}$







${slide:title=Root of inheritance hierarchy}$

${columns}$

${column:width=70}$

- ==Object== is the root of most classes
-- defines the common behavior of all objects
-- raising errors, class access, ...

${column:width=30}$

+>file://figures/InheritanceDiagram-from-ObjectNoProto.pdf|width=100+

${endColumns}$



${slide:title=In Pharo: ProtoObject }$

${columns}$

${column:width=70}$

 ==ProtoObject== (==Object=='s superclass) has a special purpose:
- raising as much errors as possible
- so that the system can catch such errors and do something with them
- useful for building advanced techniques such as proxy objects

${column:width=30}$

+>file://figures/InheritanceDiagram-Proto.pdf|width=100+

${endColumns}$


${slide:title=Two aspects of inheritance}$

Inheritance is:
- ""static"" for state/instance variables (i.e., during class creation)
- ""dynamic"" for behavior (i.e., during execution)

${slide:title=Inheritance of instance variables}$

${columns}$

${column:width=65}$

- Happens during ""class definition""
- Computed from
-- the class own instance variables
-- the ones of its superclasses
-- usually no duplicate in the chain
- ==ColoredRectangle== has a ==width==, ==height==,  ==color==, and ==borderColor==

${column:width=35}$

+>file://figures/InheritanceDiagram.png|width=100+

${endColumns}$


${slide:title=Inheritance of behavior}$

${columns}$

${column:width=50}$

- Happens at ""run time""
- The method is looked up
-- starting from the receiver's class
-- then going along superclasses

${column:width=50}$

+>file://figures/InheritanceDiagram-lookup-superclass.png|width=75+

${endColumns}$

${slide:title=What you should know}$

- Inheritance allows developpers of a class to "add" state and behavior and "redefine" behavior
- A class has 1 and only 1 superclass
- A class eventually inherits from ==Object==
- Inheritance of state is static
- Inheritance of behavior is dynamic

