{
"title":"Decorator Design Pattern",
"subtitle":"A composable alternative to subclassing",
"slidesid":"M4S6"
}

${slide:title=Goals}$

- Decorator
- Think about API

${slide:title=Decorator}$

""From the book:""
- Attach additional responsibilities to an object ""dynamically""
- Decorators provide a flexible alternative to subclassing for extending functionality


${slide:title=Decorator core}$

+>file://figures/DP-Decorator.pdf|width=80+


${slide:title=Often mixed with inheritance}$

+>file://figures/DP-DecoratorMore.pdf|width=75+


${slide:title=Decorator}$

- A decorator wraps an instance of the decoree
-- It is placed between the client and the decoree
-- It propagates or not messages to the decoree
- Easier to understand when the ==Decorator== is a subclass of ==Decoree== but not necessary (think duck typing)


${slide:title=Decorator nesting}$

- A decorator wraps an instance or decorated instance of the component

+>file://figures/DP-Decorator.pdf|width=75+

${slide:title=Transparent to the client}$

- A client manipulates ""transparently"" decorated and undecorated elements
- A client talks to the decorator which talks to the decoree (a leaf object or a another decorator)

- Strong Implication: decoree and decorator ""must"" expose the same API



${slide:title=Example of Stream}$

ZnStreams are decorators of Streams.

[[[
ZnNewLineWriterStream
	on: (ZnCharacterWriteStream on: Stdio stdout encoding: 'utf8').
]]]


- ==ZnNewLineWriterStream== decorates ==ZnCharacterWriteStream==

${slide:title=Another use}$

[[[
AbstractFileReference >> readStreamEncoded: anEncoding

	^ ZnCharacterReadStream
			on: self binaryReadStream
			encoding: anEncoding
]]]

- ==ZnCharacterReadStream== is decorating another stream with an encoding.

${slide:title=Implementation}$

[[[
WriteStream << #ZnNewLineWriterStream
	slots: { #stream . #cr . #lf . #previous . #lineEnding};
	package: 'Zinc-Character-Encoding-Core'
]]]

[[[
ZnNewLineWriterStream class >> on: aStream
	^ self basicNew
			initialize;
			stream: aStream;
			yourself
]]]

[[[
ZnNewLineWriterStream >> close
		stream close
]]]

[[[
ZnNewLineWriterStream >> flush
		^ stream flush
]]]


${slide:title=Example of Stream (I)}$


[[[
testNextPutEnsureLineEndsAreWrittenCorrectly

	| expectedString stream crStream |
	expectedString := 'a', OSPlatform current lineEnding, 'b'.
	{ String cr . String lf . String crlf } do: [ :lineEnd |
			stream := String new writeStream.
			crStream := ZnNewLineWriterStream on: stream.
			crStream
				<< 'a';
				<< lineEnd;
				<< 'b'.
			self assert: stream contents equals: expectedString ]
]]]


${slide:title=Example of Stream (II)}$

[[[
ZnNewLineWriterStream >> nextPut: aCharacter
	"Write aCharacter to the receivers stream.
	Convert all line end combinations, i.e cr, lf, crlf, to the platform convention"

	(previous == cr and: [ aCharacter == lf ]) ifFalse: [
			(aCharacter == cr or: [ aCharacter == lf ]) 
				ifTrue: [ self newLine ]
				ifFalse: [ stream nextPut: aCharacter ] ].
	previous := aCharacter.
]]]


${slide:title=Analysis}$

- All decorators should have the same API
- ==close==, ==flush==, ==nextPut:==, ==contents==, ==next==, ==atEnd==, ==on:==
- Stream decorator individual behavior can be reused and composed 

%${slide:title=Microdown builder in action}$

%+>file://figures/ClassComments.png|width=85+



${slide:title=About dynamic behavior}$

Decorators attach additional responsibilities to an object

- The decorator is based on delegation
- We should control the creation of the decoration chain (the client reference)

- Strong Implication: decorated objects do not know how if they are decorated. Changing the decoration chain at runtime is not easy.

${slide:title=When not to use decorator}$

- When decorations should have different APIs
- When the decorations should change dynamically

- Think twice when the APIs are HUGE

${slide:title=Conclusion}$

- Pay attention all the decorators should implement the same API
- Decorator is modular but within a common API