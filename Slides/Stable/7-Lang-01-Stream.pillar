{
    "title":"Basic about asString and printString",
    "author":"S. Ducasse"
}

${slide:title=Goal}$

- Think about ""intermediary object creation""
- How to avoid spurious objects
- ==asString== and ==printString== inside ==printOn:==


${slide:title=printString: setting the stage}$

[[[
Object >> printString
	^ self printStringLimitedTo: 50000
	
Object >> printStringLimitedTo: limit
	^self printStringLimitedTo: limit using: [:s | self printOn: s]
]]]

${slide:title=printString creates its own stream!}$

[[[
printProtocol: protocol sourceCode: sourceCode

	^ String streamContents: [ :stream |
		stream
			nextPutAll: '"protocol: '; 
			nextPutAll: protocol printString;
			nextPut: $"; cr; cr;
			nextPutAll: sourceCode ]	
]]]

==protocol printString==
- Creates a new stream
- Get its contents to be able to put in the first stream

${slide:title=Better use print:}$

[[[
printProtocol: protocol sourceCode: sourceCode

	^ String streamContents: [ :stream |
		stream
			nextPutAll: '"protocol: '; 
			print: protocol;
			nextPut: $"; cr; cr;
			nextPutAll: sourceCode ]	
]]]

[[[
Stream >> print: anObject
	"Have anObject print itself on the receiver."

	anObject printOn: self
]]]

${slide:title=The case of displayStringOn:}$

- When we get a stream, better use it directly
[[[
MessageTally >> displayStringOn: aStream
	self displayIdentifierOn: aStream.
	aStream 
		nextPutAll: ' (';
		nextPutAll: self tally printString;
		nextPutAll: ')'
]]]

==self tally printString==
- Creates a new stream
- Get its contents to be able to put in the first stream

${slide:title=Better}$

[[[
MessageTally >> displayStringOn: aStream
	self displayIdentifierOn: aStream.
	aStream 
		nextPutAll: ' (';
		print: self tally;
		nextPutAll: ')'
]]]

- No creation of intermediary streams


${slide:title=About asString}$

==asString== has the similar issues than ==printString==

[[[
Object >> asString
	"Answer a string that represents the receiver."

	^ self printString
]]]


${slide:title=Conclusion}$

- Check protocols
- Read code around
- Streams are powerful containers

