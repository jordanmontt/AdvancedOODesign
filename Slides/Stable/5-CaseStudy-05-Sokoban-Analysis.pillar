{
    "title":"Learning from a Sokoban implementation",
    "subtitle":"",
    "author":"S.Ducasse"
}

${slide:title=Goal}$

- Think about model
- Think about messages and condition

${slide:title=Studying a Sokoban Implementation}$

Sokoban is a puzzle video game genre in which the player pushes crates or boxes around in a warehouse, trying to get them to storage locations.
*https://en.wikipedia.org/wiki/Sokoban*

+.>file://figures/SokobanOld.png|width=30+

${slide:title=Studying a Sokoban Implementation}$

- Developed by some students of I. Franko University (Lviv)
- Thank you so much!

+.>file://figures/LearnFEx-Sokoban1.png|width=65+


${slide:title=Looking the implemented core model}$

- Block
-- EmptyBlock
-- Wall
- GameModel
- GameState
- Maze
- MazeTemplate
- MoveResult
-- Move
--- Push
-- NoMove





${slide:title=Let us ""Speculate about Design""}$

${columns}$

${column:width=60}$

- Apply ""Speculate about Design"" object-oriented reengineering pattern

- ""Intent:"" Progressively refine a design against source code by checking hypotheses about the design against the source code. 

- Use your development expertise to conceive a hypothetical class diagram representing the design.

${column:width=40}$

+.>file://figures/OORP.jpg|width=50+

${endColumns}$



${slide:title=Take some minutes to sketch a list of classes}$


${columns}$

${column:width=30}$

- ...
- ...
- ...

${column:width=60}$

+.>file://figures/LearnFEx-Sokoban1.png|width=65+

${endColumns}$

${slide:title=A possible implementation}$

${columns}$

${column:width=30}$

- Wall
- Floor
- Box
- Robot
- Target
- Board

And 
- Template/Level
- Moves

${column:width=60}$

+.>file://figures/LearnFEx-Sokoban1.png|width=65+

${endColumns}$


${slide:title=Let us go back}$

- ==Block==
-- ==EmptyBlock==
-- ==Wall==
- ==GameModel==
- ==GameState==
- ==Maze==
- ==MazeTemplate==
- ==MoveResult==
-- ==Move==
--- ==Push==
-- ==NoMove==


${slide:title=Gut feeling analysis}$

- The implemented Block model looks too shallow
- Remember classes 
-- are representing cases
--  are the basis for dispatch
- Not enough classes leads to tricky conditionals and monolithic systems
- Remember the lectures ""Implementing not, or...""
+.>file://figures/Design-FatVsDispatch.pdf|width=50+

${slide:title=Let us check the class API}$

Classes define:
- ==isEmptyBlock==
- ==isWall==
- ==hasPlayer==
- ==hasTarget==
- ==hasBox==

Let us check the way this API is used


${slide:title=Too many ifs....}$

[[[
GameView >> drawBlock: aBlock on: aCanvas
	aBlock isWall 
		ifTrue: [ self drawWall: aCanvas ]
		ifFalse: [ aBlock isEmptyBlock 
			ifTrue: [ aBlock hasPlayer 
					ifTrue: [ aBlock hasTarget 
							ifTrue: [ self drawTargetAndPlayer: aCanvas ]
						 	ifFalse: [ self drawPlayer: aCanvas ]]
					ifFalse: [ aBlock hasBox 
						ifTrue: [ aBlock hasTarget 
							ifTrue: [ self drawTargetAndBox: aCanvas ]
							ifFalse: [ self drawBox: aCanvas ]]
					ifFalse: [ 
						aBlock hasTarget 
							ifTrue: [ self drawTarget: aCanvas ]
						ifFalse: [ self drawEmptyBlock: aCanvas ]]]
]]]

${slide:title=Analysis}$

The model only defines ==EmptyBlock== and ==Wall==

- No Player, no target, no box.
- ""Too much logic"" is put in ==EmptyBlock==
- Too much Ask, ""not enough Tell"" (""Do not Ask, Tell"")

${slide:title=With a better model}$	

- ==Block==
-- ==Box==
-- ==BoxOnTarget==
-- ==EmptyBlock==
-- ==Player==
-- ==Wall==

- We can send ""messages"" to the 'correct' object
- We can tell and not ask!


${slide:title=A first nicer solution}$	

[[[
GameView >> drawBlock: aBlock on: aCanvas
	aBlock isWall ifTrue: [ self drawWall: aCanvas ].
	aBlock isEmptyBlock ifTrue: [ 
	aBlock hasPlayer ifTrue: [ ...
]]]

Becomes

[[[
GameView >> drawBlock: aBlock on: aCanvas
	aBlock drawOn: aCanvas

Wall >> drawOn: aCanvas 
	"Cairo code"

EmptyBlock >> drawOn: aCanvas
	"Cairo code"
]]]



${slide:title=A solution supporting multiple canvases}$

To be able to have the rendering supporting multiple back-ends (morphic, Cairo...)
drawing should not be in the Block classes


${slide:title=A solution supporting multiple canvases}$

[[[
GameView >> drawBlock: aBlock on: aCanvas
	aBlock isWall ifTrue: [ self drawWall: aCanvas ].
	aBlock isEmptyBlock ifTrue: [ 
	aBlock hasPlayer ifTrue: [ ...
]]]

Becomes

[[[
GameView >> drawBlock: aBlock on: aCanvas
	aBlock drawOn: aCanvas

Wall >> drawOn: aCanvas 
	aView drawWall: aCanvas

EmptyBlock >> drawOn: aCanvas
	aView drawEmptyBlock: aCanvas
]]]



${slide:title=Double dispatch}$	

Each block tells the view how to draw it. 

[[[
GameView >> drawBlock: aBlock on: aCanvas
	aBlock drawOn: aCanvas view: self

Wall >> drawOn: aCanvas view: aView
	aView drawWall: aCanvas

EmptyBlock >> drawOn: aCanvas view: aView
	aView drawEmptyBlock: aCanvas
]]]

- We ""tell"" a block to draw itself and it ""tells"" how to the canvas
- Sending messages is powerful
- Modular

${slide:title=Disguided kind testing method}$

[[[
Wall >> isWall
	^ true
	
EmptyBlock >> isWall
	^ false
]]]

and 

[[[
GameView >> drawBlock: aBlock on: aCanvas
	aBlock isWall ifTrue: [ self drawWall: aCanvas ]
]]]

is nearly the same as

[[[
GameView >> drawBlock: aBlock on: aCanvas
	(aBlock isKindOf: Wall) ifTrue: [ self drawWall: aCanvas ].
]]]


${slide:title=Back to the model}$

What are:
- ==MoveResult==
-- ==Move==
--- ==Push==
-- ==NoMove==

- Reification of player actions
- Could be good to record and replay

${slide:title=Let us study the API}$


[[[
MoveResult >> isMove
	^ false
	
MoveResult >> isPush
	^ false
	
MoveResult >> isNoMove
...
]]]

- Again testing kind methods
- Testing kind methods are the same as ==x class = MoveResult==

${slide:title=Checking testing method use}$

[[[
GameState >> moveBy: aDirection
	| move |
	move := maze moveBy: aDirection.
	move isMove ifTrue: [ moves := moves + 1 ].
	move isPush ifTrue: [ 
		pushes := pushes + 1.
		moves := moves + 1 ].
	self addMove: move
]]]

${slide:title=Do not ask, tell}$

[[[
GameState >> moveBy: aDirection
	| move |
	move := maze moveBy: aDirection.
	move updateGameState: self.	
	self addMove: move

Move >> updateGameState: aGameState
	aGameState incrementMoves

Push >> updateGameState: aGameState
	super updateGameState: aGameState.
	aGameState increasePushes

NoMove >> updateGameState: aGameState 
	self
]]]

${slide:title=Conclusion}$

- ""Challenge"" classes
- ""Little"" class hierarchies are ""good""
- Better ""many small classes than a big one""
- ""Challenge"" kind testing methods
- ""Check"" their use
- Messages act as ""dispatcher""



