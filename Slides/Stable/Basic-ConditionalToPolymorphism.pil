{
  "title":"Basic-Avoid If Checks",
  "subtitle":"",
  "author" : ""
}

${slide:title=Outline}$

- Anti if Campaign
- Returning nil
- Null Object 

${slide:title=Anti If Campaign}$

[[[
Main >> showHappiness: animal
   animal isDog
      ifTrue: [ animal shakeTail ].
   animal isDuck
      ifTrue: [ animal quack ].
   animal isCat ifTrue: [ ... ].
]]]


${slide:title=Anti If Campaign}$

[[[
Main >> showHappiness: animal
   animal isDog
      ifTrue: [ animal shakeTail ].
   animal isDuck
      ifTrue: [ animal quack ].
   animal isCat ifTrue: [ ... ].
]]]

Branching (with ==if==) based on the type of an object is bad:
- adding a new type requires modifying all such code
- methods will become very long and full of details

Send messages instead

%+.>file://figures/antifIfCampaign.png|width=60+

${slide:title=Better Approach: Define Polymorphic Method}$

[[[
Dog >> showHappiness
   self shakeTail
Duck >> showHappiness
   self quack
Cat >> showHappiness
   ...
]]]


${slide:title=Conclusion}$s

- Sending message acts as a better ==if==
- Check Lectures "Avoid if Null"
- Check Lectures "LazyInitialization"

%+.>file://figures/antifIfCampaign.png|width=60+
