{
	"title" : "Stone Paper Scissors",
	"subtitle" : "The case of results",
	"slidesid":"M6S6"
}

${slide:title=Goals}$

- Think about results
- What to do with them


${slide:title=Remember}$

[[[
> Stone new vs: Paper new
#paper
]]]


+An overview of a possible solution using double dispatch.>file://figures/StonePaperScissorsNoParameters.pdf|width=80+


${slide:title=What should we return?}$

- What symbols, numbers?
- Consequences?


${slide:title=Returning numbers}$

[[[
StonePaperScissorsTest >> testPaperIsWinning
	self assert: (Stone new vs: Paper new) equals: -1
]]]

[[[
StonePaperScissorsTest >> testStoneAgainsStone
	self assert: (Stone new vs: Stone new) equals: 0
]]]

[[[
StonePaperScissorsTest >> testStoneIsWinning
	self assert: (Stone new vs: Scissors new) equals: 1
]]]


${slide:title=Returning number analysis}$

- We have to know the message sent to know how to interpret the number

[[[
> Stone new vs: Paper new
-1

> Paper new vs: Stone new
1
]]]

- Here paper is winning but it got different results!

${slide:title=Returning symbols analysis}$

[[[
> Stone new vs: Paper new
#paper

> Paper new vs: Stone new
#paper
]]]

- With symbols we know who won
- We will have to compare to do something

[[[
(aPlayer vs: anotherPlay) = #draw 	
	ifTrue: [ ... ]
]]]

${slide:title=Alternate solution }$

[[[
Paper new vs: Paper new
	onDraw: [ Game incrementDraw ]
	onReceiverWin: [ ]
	onReceiverLose: [ ]
]]]


[[[
Paper >> playAgainstStone: aStone 
	onDraw: aDrawerBlock 
	onReceiverWin: aWinnerBlock 
	onReceiverLose: aLoserBlock

	^ aWinnerBlock value
]]]

It feels that there are too many parameters.

${slide:title=Simply with objects}$

[[[
Paper new vs: Paper new withResultHandler: ResultHandler new
]]]

[[[
Paper >> playAgainstStone: aStone withResultHandler: aResultHandler
	^ aResultHandler paperWon
]]]

- It feels like the "Do not not ask tell"
- We can have different result handlers
- Feel free to experiment to see how it goes


${slide:title=Stepping back}$


- Symbols looks better than numbers for returning information for this case but there are numerous cases where a number is definitively better
- Creating result handlers can be heavy
- Context and scenarios often give you information to see 
-- where to invest
-- what is worth to support reuse


${slide:title=Conclusion}$

A desihn solution is often dependent on a context
- Try alternate solutions, compare them
- Exercise your design taste
