{
    "title":"Tests",
    "subtitle":"Why Testing is Important"
}

${slide:title=Goal}$

- Why tests are important?
- What are their advantages?
- What are the techniques to write good tests?

${slide:title=Understanding Code ;/ }$

[[[
convert
   | s |
   s := '#000000' copy.
   s at: 2 put: (Character digitValue: ((rgb bitShift: -6 - RedShift) bitAnd: 15)).
   s at: 3 put: (Character digitValue: ((rgb bitShift: -2 - RedShift) bitAnd: 15)).
   s at: 4 put: (Character digitValue: ((rgb bitShift: -6 - GreenShift) bitAnd: 15)).
   s at: 5 put: (Character digitValue: ((rgb bitShift: -2 - GreenShift) bitAnd: 15)).
   s at: 6 put: (Character digitValue: ((rgb bitShift: -6 - BlueShift) bitAnd: 15)).
   s at: 7 put: (Character digitValue: ((rgb bitShift: -2 - BlueShift) bitAnd: 15)).
   ^ s
]]]


${slide:title=Understanding Code: API and Result}$

[[[
testConvert
   self assert: Color white convert equals: '#FFFFFF'.
   self assert: Color red convert equals: '#FF0000'.
   self assert: Color black convert equals: '#000000'
]]]

${slide:title=Understanding Code}$

[[[
testConvert2
   | table aColorString |
   table := #('0' '1' '2' '3' '4' '5' '6' '7' '8' '9' 'A' 'B' 'C' 'D' 'E' 'F').

   table do: [ :each |
      aColorString := '#', each, each, '0000'.
      self assert: ((Color fromString: aColorString) convert sameAs: aColorString)].

testConvert3
     | table aColorString |
     table := #('0' '1' '2' '3' '4' '5' '6' '7' '8' '9' 'A' 'B' 'C' 'D' 'E' 'F').

     table do: [ :each |
        aColorString := '#', each, each, '0000'.
        self assert: ((Color fromString: aColorString) convert sameAs: aColorString)].
]]]

${slide:title=Understanding Code}$

You do not have to know how numbers are implemented to understand that this ==bitShift:== is working.

[[[
testBitShift
   self assert: (2r11 bitShift: 2) equals: 2r1100.
   self assert: (2r1011 bitShift: -2) equals: 2r10.
]]]

[[[
testShiftOneLeftThenRight
   "Shift 1 bit left then right and test for 1"
   
   1 to: 100 do: [:i | 
      self 
        assert: ((1 bitShift: i) bitShift: i negated) 
        equals: 1].
]]]



${slide:title=Collateral Advantages}$

- Improve feeling of customers who care
- Allow for automatic bug fixing
- Improve type inference
- Provide examples to variable values

