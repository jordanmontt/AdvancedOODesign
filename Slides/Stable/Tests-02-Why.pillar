{
    "title":"Tests",
    "subtitle":"Why Testing is Important",
    "author":"S. Ducasse",
    "slidesid": " "
}

${slide:title=Goal}$

- Why tests are important?
- What are their advantages?
- What are the techniques to write good tests?

${slide:title=Why testing?}$

- Tests are your life insurance
- Increase trust that a change did not break something
- Reduce the fear of changes
- Supporting code understanding

${slide:title=Test positive properties}$

- Find bugs when they appear
- improve customer trust
- Reproduce complex scenarii
- Guarantee old bugs are caught if reappear
- Isolate a problem

${slide:title=Some characteristics of a good test suite}$

- Check extreme cases (e.g., null, 0 and empty)
- Check complex cases (e.g., exceptions, network pbs)
- 1 test for each bug (at least)
- Good coverage
- Check abstractions
- Check units independently



${slide:title=Understanding code ;/ }$

[[[
convert
   | s |
   s := '#000000' copy.
   s at: 2 put: (Character digitValue: ((rgb bitShift: -6 - RedShift) bitAnd: 15)).
   s at: 3 put: (Character digitValue: ((rgb bitShift: -2 - RedShift) bitAnd: 15)).
   s at: 4 put: (Character digitValue: ((rgb bitShift: -6 - GreenShift) bitAnd: 15)).
   s at: 5 put: (Character digitValue: ((rgb bitShift: -2 - GreenShift) bitAnd: 15)).
   s at: 6 put: (Character digitValue: ((rgb bitShift: -6 - BlueShift) bitAnd: 15)).
   s at: 7 put: (Character digitValue: ((rgb bitShift: -2 - BlueShift) bitAnd: 15)).
   ^ s
]]]

${slide:title=Understanding code: API and result}$

[[[
testConvert
   self assert: Color white convert equals: '#FFFFFF'.
   self assert: Color red convert equals: '#FF0000'.
   self assert: Color black convert equals: '#000000'
]]]

${slide:title=fromString: and convert interplay}$

[[[
testFromStringIsCoherentWithConvert
   | table aColorString |
   table := #('0' '1' '2' '3' '4' '5' '6' '7' '8' '9' 'A' 'B' 'C' 'D' 'E' 'F').

   table do: [ :each |
      aColorString := '#', each, each, '0000'.
      self assert: ((Color fromString: aColorString) convert sameAs: aColorString)].
]]]

${slide:title=Understanding code}$

You do not have to know how numbers are implemented to understand that this ==bitShift:== is working.

[[[
testBitShift
   self assert: (2r11 bitShift: 2) equals: 2r1100.
   self assert: (2r1011 bitShift: -2) equals: 2r10.
]]]

[[[
testShiftOneLeftThenRightGetsOne
   "Shift 1 bit left then right and test for 1"
   
   1 to: 100 do: [:i | 
      self 
        assert: ((1 bitShift: i) bitShift: i negated) 
        equals: 1].
]]]

${slide:title=Test positive properties}$

- Give simple and reproducible examples
- Illustrate the API
- Give up-to-date documentation
- Check conformity of new code
- Offer a first client to new code
- Force a 'customizable' design

${slide:title=Tests reduce change fear}$

- Accelerate bug detection
- Accelerate new code checking
- Ease refactorings
- Prevent regressions

${slide:title=Characteristics of a Good Test Suite}$

- Deterministic
- Automatic
- Self-explained
- Simple
- Unit

${slide:title=Characteristics of a Good Test Suite (2)}$

- Change less frequently than the rest
- Good code coverage
- Deterministic

${slide:title=Conclusion}$

- Tests are important
- In particular in dynamically-typed language
- Help deliver complex projects
