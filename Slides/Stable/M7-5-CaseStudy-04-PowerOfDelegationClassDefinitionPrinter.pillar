{
	"title":"Behavior delegation at work",
	"subtitle":"The case of the class printer",
	"slidesid":"M7S5"
}


${slide:title=Goals}$

- Think ""modular""
- Look at the class definition printer
- Check design in Pharo

${slide:title=Context and challenges}$

How to support ""various"" class definition formats in a ""modular"" way?
- Formats:
-- Old Squeak syntax, old Pharo, and Fluid syntax
- ""Different"" objects:
-- class, metaclass, trait...
- How to ""control"" the complexity?
-- Slots should not be displayed in Old Pharo
- How to avoid ""checks"" everywhere?
- And can we support removing one definition at any time without recompilation


${slide:title=First hacked version in Pharo 70/80}$

- Introduction of support for slots was hacked
- Smell like duplication
[[[
ClassDescription >> definition
	(self needsSlotClassDefinition or: [ Slot showSlotClassDefinition ]) 
		ifTrue: [ ^ self definitionWithSlots ].
	^ self definitionWithoutSlots
]]]

[[[
Metaclass >> definition
	(self slotsNeedFullDefinition or: [ Slot showSlotClassDefinition ]) 
		ifTrue: [ ^ self definitionWithSlots ].
	^ self definitionWithoutSlots
]]]



${slide:title=Hacked in tools too}$

[[[
ClyClassCreationToolMorph >> classTemplate

	| template |
	template := Slot showSlotClassDefinition
		ifTrue: [ 
			'Object subclass: #NameOfSubclass
	slots: {}
	classVariables: {}
	package: ''' ]
		ifFalse: [ 
			'Object subclass: #NameOfSubclass
	instanceVariableNames: ''''
	classVariableNames: ''''
	package: ''' ].
	^ template , self packageName , '''' 
]]]


${slide:title=Thinking... about a solution}$

Think 5 min how you would solve it

${slide:title=Solution: Delegating to a class definition printer}$

- Create class definition printers
- A kind of Strategy Design Pattern
- A hierarchy of printers \+ a factory \+ some double dispatch

[[[
ClassDefinitionPrinter ( forClass )
	FluidClassDefinitionPrinter
	LegacyClassDefinitionPrinter
	OldPharoClassDefinitionPrinter
]]]


${slide:title=Solution: Delegating to a class definition printer}$

+>file://figures/ClassPrinterFluid.pdf|width=90+


${slide:title=The class asks a printer}$

[[[
ClassDescription >> definitionString
	^ self definitionPrinter definitionString
]]]

The printer factory creates and return a printer for the class
[[[	
ClassDescription >> definitionPrinter
	^ ClassDefinitionPrinter for: self
]]]


${slide:title=A printer}$

Knows how to print
- class (==classDefinitionString==)
- metaclass (==metaclassDefinitionString==)
- trait (==traitDefinitionString==)

${slide:title=Fluid class printer at work}$

A class
[[[
Object << #Point
		slots: { #x . #y };
		tag: 'BasicObjects';
		package: 'Kernel'
]]]

A metaclass without class instance variables

[[[
Object class << Point class
]]]

${slide:title=Fluid printer: a class}$

[[[
FluidClassDefinitionPrinter >> classDefinitionString

	^ String streamContents: [ :s | 
		  forClass superclass
			  ifNotNil: [ s nextPutAll: forClass superclass name ]
			  ifNil: [ s nextPutAll: 'nil' ].
		self msgAndClassNameOn: s.
		...
		...
		forClass slots ifNotEmpty: [ self slotsOn: s ].
		forClass classVariables ifNotEmpty: [ self sharedVariablesOn: s ].
		forClass sharedPools ifNotEmpty: [ self sharedPoolsOn: s ].
		self tagOn: s.
		self packageOn: s ]
]]]

${slide:title=Fluid printer: a metaclass}$

[[[
FluidClassDefinitionPrinter >> metaclassDefinitionString 

	^ String streamContents: [ :strm |
		forClass superclass 
			...
				strm 
					nextPutAll: forClass superclass name;
					nextPutAll: ' << ';
					nextPutAll: forClass name ]
			...
		self lastTraitsOn: strm.
		forClass slots ifNotEmpty: [ self lastSlotsOn: strm ] ]
]]]

${slide:title=Old Pharo cannot display slots}$


[[[
OldPharoClassDefinitionPrinter >> classDefinitionString
	^ forClass needsSlotClassDefinition 
			ifTrue: [ (ClassDefinitionPrinter fluid for: forClass) classDefinitionString ]
			ifFalse: [ self basicClassDefinitionString ]
]]]

If the class has slots then 
- ask a fluid class printer to do the job


${slide:title=Tool logic is now simpler}$

[[[
ClassCreationToolMorph >> classTemplate

	^ ClassDefinitionPrinter new 
			compactClassDefinitionTemplateInPackage: self packageName
]]]

${slide:title=Analysis}$

- ""Modular"": One format = one printer
- One printer supports ""multiple"" related features (expansion, template, class printing)
- Supports ""reuse"" within the hierarchy
- ""Defaulting"" within printers
-- if necessary legacy printer redirects to fluid printer


${slide:title=More challenges}$

How to support printing ""different"" objects on ""different"" printers?
- Traits, Classes, and Metaclasses
- Legacy, OldPharo, and Fluid

${slide:title=Solution: Delegating to a class definition printer}$

+>file://figures/ClassPrinter.pdf|width=100+

${slide:title=Double Dispatch}$

[[[
ClassDefinitionPrinter >> definitionString	
	^ forClass definitionStringFor: self
]]]

[[[
Class >> definitionStringFor: aPrinter
	^ aPrinter classDefinitionString

Trait >> definitionStringFor: aConfiguredPrinter
	^ aPrinter traitDefinitionString

TraitedMetaclass >> definitionStringFor: aPrinter
	^ aPrinter traitedMetaclassDefinitionString 
]]]


${slide:title=More tension}$

- Do not want to have direct reference to printers to be able to easily ""remove""  printers in the future

""Solution:""
- ""Limit"" reference to specific printers
- Only reference the superclass that acts as a ""factory""

${slide:title=Encapsulate printer selection}$

[[[
Object << #ClassDefinitionPrinter
	slots: { #forClass };
	sharedVariables: { #DisplayEmptySlots . #ShowFluidClassDefinition };
	tag: 'ClassDefinitionPrinter';
	package: 'Kernel'
]]]


[[[
ClassDefinitionPrinter >> new
	^ self showFluidClassDefinition
			ifTrue: [ self fluid ]
			ifFalse: [ self oldPharo ]
]]]


${slide:title=Still the possibility to refer to legacy definition}$

[[[
ClassDescription >> oldDefinition

	^ ClassDefinitionPrinter legacy
		for: self;
		definitionString
]]]


${slide:title=Conclusion}$

- Dispatch over objects
- Avoid complex conditional cases
- Concentrate object creation point

