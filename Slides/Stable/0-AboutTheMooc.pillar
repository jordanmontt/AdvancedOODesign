{
    "title" : "Object-Oriented Design",
    "subtitle": "An advanced and pragmatic Mooc",
    "slidesid":"2023"
}


${slide:title=Why this mooc?}$

- Following the  success of the Pharo mooc (*http://mooc.pharo.org*)

''I have already learned so much ! I have spent the last 20 years or so in software development and, following this Mooc, I realized I hadnâ€™t really grasped the essence of object oriented design.'' - Anonymous


${slide:title=Going to the next level}$

- Focus on object-oriented design
- Unique value
- From object designer experts

${slide:title=Objectives}$

- Revisit basic elements such as encapsulation, delegation
- Think about essential aspects of OOP
- Learn key Design Patterns
- Analyse real case studies
- Things about Pharo code idioms

${slide:title=10 modules}$

${columns}$

${column:width=50}$

- Understanding messages
- Tests and test driven 
- Hooks
- Elementary design patterns
- Object Creation
- Double Dispatch

${column:width=50}$

- Object creation
- Objects: state and behavior
- Registration
- Sharing
- Types

${endColumns}$

${slide:title=About Pharo}$

All the code samples and examples are taken from Pharo (*http://www.pharo.org*)

+>file://figures/Pharo.jpg+


${slide:title= Why Pharo?}$
- Pharo is pure and powerful object-oriented language (read more at *http://www.pharo.org*)
- With only objects, messages, and lambdas, Pharo helps us to focus on important ideas!
- Complement the excellent Pharo mooc (*http://mooc.pharo.org*)



${slide:title=About vocabulary: The case of polymorphism}$

- To avoid some misunderstandings
- The word "Polymorphism" is overloaded
- Literally, it is strange: having multiple forms :)
- It could mean subtyping: when a class is a subclass of another one.

${slide:title=Our stance}$

''If it walks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck.''

We use the terms ""polymorphic"" or ""polymorphism"" in the sense of:
- exposing the same API, 
- being substituable,
- an object can be replaced by another one because both present the same API (set of messages),
- polymorphic objects do not have to be subtypes

${slide:title=Polymorphism}$

- Looking at object API
- To produce reusable and extensible programs
- Not much as class structural relation (subtyping)

${slide:title=A unique mooc}$

- More than 60 years of experience in OO design and practices
- Concrete cases
- Knowledge actionable in many languages