{
"title" : "Advanced Object-Oriented Design",
"slidesid":"2023"
}



${slide:title=Going to the next level}$

-  Object-oriented design to the roots
- Unique value
- From object designer experts

${slide:title=Why this mooc?}$

Following the  success of the Pharo mooc (*http://mooc.pharo.org*)

''I have already learned so much ! I have spent the last 20 years or so in software development and, following this Mooc, I realized I hadnâ€™t really grasped the essence of object oriented design.'' - Anonymous




${slide:title=Objectives}$

- Revisit basic elements such as encapsulation, delegation
- Think about essential aspects of object-oriented design
- Learn key Design Patterns
- Analyze real case studies
- Things about Pharo code idioms

${slide:title=10 modules}$

+>file://figures/MapL.pdf|width=80+

%${slide:title=10 modules}$

%${columns}$

%${column:width=50}$

%- Understanding messages
%- Tests and test driven 
%- Hooks
%- Elementary design patterns
%- Object Creation
%- Double Dispatch

%${column:width=50}$

%- Objects: state and behavior
%- Object creation
%- Registration
%- Sharing objects
%- Types

%${endColumns}$

${slide:title=About Pharo}$

All the code samples and examples are taken from Pharo (*http://www.pharo.org*)

+>file://figures/Pharo.jpg+


${slide:title= Why Pharo?}$

- Pharo is pure and powerful object-oriented language (See *http://www.pharo.org*)
- With only objects, messages, and lambdas, Pharo helps us to focus on important ideas!
- Complement the excellent Pharo mooc (*http://mooc.pharo.org*)


${slide:title=Our definition of polymorphism}$

''If it walks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck.''

We use the terms ""polymorphic"" or ""polymorphism"" in the sense of:
- exposing the same API, 
- being substituable,
- an object can be replaced by another one because both present the same API (set of messages),
- polymorphic objects do not have to be subtypes

${slide:title=A unique mooc}$

- More than 60 years of experience in OO design and practices
- Concrete cases
- Knowledge actionable in many languages

