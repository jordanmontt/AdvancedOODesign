{
  "title":"Avoid Null Checks",
  "subtitle":"",
  "author" : "S. Ducasse",
  "slidesid":" "
}

${slide:title=Goal}$

- Understanding the implication behind returning nil
- Null Object 

${slide:title=nil?}$

- Unique instance of the class ==UndefinedObject==
- Real object, as anybody else
- Default value of uninitialized instance variable
- Still we should be careful when to use it

${slide:title=Do Not Return Nil}$

Imagine an inferencer that looks for rules that can be applied to a fact. 

[[[
Inferencer >> rulesForFact: aFact
	...
	self noRule ifTrue: [ ^ nil ]
	^ self rulesAppliedTo: aFact
]]]

- Here ==rulesForFact:== returns ==nil== to indicate that there is no rules for a fact.

${slide:title=Consequences!}$

Returning ==nil== (e.g., ==ifTrue: [ ^ nil ]==) forces EVERY client to check for ==nil==:

[[[
(inferencer rulesForFact: 'a')
   ifNotNil: [ :rules |
      rules do: [ :each | ... ]
]]]



${slide:title=Solution: Return Polymorphic Objects}$

When possible, return polymorphic objects:
- when returning a collection, return an empty one
- when returning a number, return 0


${slide:title=Solution: Return Polymorphic Objects}$

[[[
Inferencer >> rulesForFact: aFact
   self noRule ifTrue: [ ^ #() ]
   ^ self rulesAppliedTo: aFact
]]]

Your clients can just iterate and manipulate the returned value

[[[
(inferencer rulesForFact: 'a') do: [ :each | ... ]
]]]


${slide:title=For Exceptional Cases, Use Exceptions}$

For exceptional cases, replace ==nil== by exceptions:
- avoid error codes because they require ==if== in clients
- exceptions may be handled by the client, or the client's client, or ...

[[[
FileStream >> nextPutAll: aByteArray
   canWrite ifFalse: [ self cantWriteError ].
   ...
FileStream >> cantWriteError
   (CantWriteError file: file) signal
]]]

${slide:title=Solution: Initialize Your Object State}$

Avoid ==nil== checks by initializing your variables
- by default instance variables are initialized with ==nil==
- The responsibility of an object is to correctly initialize its state

[[[
Archive >> initialize
   super initialize.
   members := OrderedCollection new
]]]

${slide:title=Solution: Use Lazy Initialization when Necessary}$


You can defer initialization of a variable to its first use:

[[[
FreeTypeFont >> descent
   ^ cachedDescent ifNil: [
        cachedDescent := (self face descender * self pixelSize //
                               self face unitsPerEm) negated ]
]]]

This is only when the method ==descent== is executed that ==cachedDescent== will be initialized.

${slide:title=Solution: Use Lazy Initialization when Necessary}$

- Lazy initialization trades time vs runtime cost (==ifNil:== check)
- You should always use this accessor
- Pay attention you should NOT access directly an instance variable used in a lazy setting 
- Else you can get exposed to ==nil== value

${slide:title=Sometimes you have to check...}$

Sometimes you have to check before doing an action
- when possible, you can turn the default case into an object, a Null Object.

${slide:title=Example}$

[[[
ToolPalette >> nextAction
   self selectedTool
      ifNotNil: [ :tool | tool attachHandles ]

ToolPalette >> previousAction
   self selectedTool
      ifNotNil: [ :tool | tool detachHandles ]
]]]

Here we are forced to check that there is a selected tool. 
- Why not having always one selected?
- Even one doing nothing?

${slide:title=Example}$

+>figures/NullObject2.pdf+


${slide:title=Solution: Use NullObject}$

- A null object proposes a ""polymorphic"" API and embeds default actions/values.
- Woolf, Bobby (1998). "Null Object". In Pattern Languages of Program Design 3. Addison-Wesley.

Let us create a ==NoTool== class whose behavior is to do nothing.


${slide:title=Solution: NoTool}$

[[[
AbstractTool < #NoTool
]]]

[[[
NoTool >> attachHandles
   ^ self
NoTool >> detachHandles
   ^ self
]]]

${slide:title=Solution: Use NullObject}$

Initialize the ==ToolPalette== with a ==NoTool== instance.

[[[
ToolPalette >> initialize
   self selectedTool: NoTool new
]]]

And we get no forced ==ifNil:== tests anymore

[[[   
ToolPalette >> nextAction
   self selectedTool attachHandles
   
ToolPalette >> previousAction
   self selectedTool detachHandles
]]]

${slide:title=Solution: With initialization and NoTool}$

+>figures/NullObject3.pdf+



${slide:title=About NullObject}$

Sometimes it is difficult to apply the ==NullObject==
- Too large API
- Or would need too many NullObjects
- Unclear default "no behavior"

${slide:title=Conclusion}$

- A message acts as a better ==if==
- Avoid null checks, return polymorphic objects instead
- Initialize your variables
- If you can, create objects representing default behavior
