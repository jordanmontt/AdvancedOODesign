{
    "title":"Turning Procedures to Objects",
    "author":"S. Ducasse"
}

${slide:title=Goals/Objective}$

Super basic to say it but 
- ""Objects are really powerful""
- Basic for behavior reification
- An example: ==Behavior>>printHierarchy== vs. ==ClassHierarchyPrinter==
-- ==printHierarchy== is a method
-- ==ClassHierarchyPrinter== is a little class


${slide:title=Printing the hierarchy of class}$

[[[
Rectangle printHierarchy
]]]
[[[
'ProtoObject #()
	Object #()

		Rectangle #(#origin #corner)
			CharacterBlock #(#stringIndex #text #textLine)'
]]]


${slide:title=Coded as...}$

[[[
Behavior >> printHierarchy
	"Answer a description containing the names and instance variable names 
	of all of the subclasses and superclasses of the receiver."

	| aStream index |
	index := 0.
	aStream := (String new: 16) writeStream.
	self allSuperclasses reverseDo: 
		[:aClass | 
		aStream crtab: index.
		index := index + 1.
		aStream nextPutAll: aClass name.
		aStream space.
		aStream print: aClass instVarNames].
	aStream cr.
	self printSubclassesOn: aStream level: index.
	^aStream contents
]]]

${slide:title=With...}$
[[[
Behavior >> printSubclassesOn: aStream level: level 
		"As part of the algorithm for printing a description of the receiver, print the
		subclass on the file stream, aStream, indenting level times."

		| subclassNames |
		aStream crtab: level.
		aStream nextPutAll: self name.
		aStream space; print: self instVarNames.
		self == Class
			ifTrue: 
				[aStream crtab: level + 1; nextPutAll: '[ ... all the Metaclasses ... ]'.
				^self].
		subclassNames := self subclasses asSortedCollection:[:c1 :c2| c1 name <= c2 name].
		"Print subclasses in alphabetical order"
		subclassNames do:
			[:subclass | subclass printSubclassesOn: aStream level: level + 1]
]]]

${slide:title=Analyis}$

- ""Procedural"" decomposition
- ""Simple"" (two methods)
- State is passed as arguments

""Does not"" work if we need 
- To filter subclasses (==RBLintRule printHierarchy==)
- To cut above a given superclass or if class is from a given package
- Do not want to see instance variables

${slide:title=Limits }$

- End up with ""too many"" arguments
- We cannot design a fluid API to ""configure"" the output
- We may not want or ""cannot"" add state to the domain object 
-- here we do not want to add state to ==Behavior== just for printing 

${slide:title=Turning it into an object}$

We can simply do

[[[
ClassHierarchyPrinter new  
	forClass: Rectangle; 
	doNotShowState;
	doNotShowSuperclasses
]]]


${slide:title=A more complex scenario}$

[[[
ClassHierarchyPrinter new 
	forClass: RBNode; 
	doNotShowState;
	doNotShowSuperclasses;
	excludedClasses: (RBNode withAllSubclasses 
						select: [ :each | each name beginsWith: 'RBPattern' ]);
	limitedToClasses: (RBNode withAllSubclasses 
							select: [:each | each name beginsWith: 'RB']).
]]]

${slide:title=Looking at ClassHierarchyPrinter}$

[[[
Object << #ClassHierarchyPrinter
	slots: { #theClass . #excludedClasses . #limitedToClasses . #stream . 
	#level . #showSuperclasses . #showState };
	tag: 'ForPharo';
	package: 'Kernel-ExtraUtils'
]]]


API
- ==doNotShowState==, ==doNotShowSuperclasses==
- ==limitedToClasses:== to offer specific scope
- ==excludedClasses:== to remove unwanted subclasses
- ==cr==, ==tab==, ==nextPutAll:== to let decorations


${slide:title=DatePrinter vs. Date printOn:}$

[[[
10 Janvier 2023
10 Jan 23
10 / 01 / 2023
10-01-2023
01 / 10 / 2023
]]]
- should printOn: handles all this?
Printing a date can be the responsibility of an object

${slide:title=ZTimestampFormat}$

The class ==ZTimestampFormat== is a nice example

- I am ZTimestampFormat, an implementation of a textual representation for a timestamp, date or time that can be used for formatting or parsing.

- You instanciate me by specifying the textual format by example, based on a #reference timetamp.


[[[
(ZTimestampFormat fromString: 'SAT, FEB 03 2001 (16:05:06)')
	format: ZTimestamp now.
> 'FRI, OCT 28 2022 (06:43:11)'
]]]

[[[
(ZTimestampFormat fromString: '02/03/2001 (16:05:06)')
	parse: '10/05/2022 (12:01:01)'.
> 2022-10-05T12:01:01Z
]]]


${slide:title=Stepping back}$

- Created ""little objects"" that can be configured!
- The object holds the ""specific state"" for its computation
- The API can extended if needed

- Functionality can be removed from the original places
- Functionality can be ""nicely tested"" and packaged in autonomous manner

${slide:title=Further thought}$

- Turning a method into an object is the key point of Command Design pattern
- An object is a ""powerful"" entity



