{
	"title":"Methods: the elementary unit of reuse",
	"subtitle":"Obvious but important",
	"author":"S. Ducasse"
}


${slide:title=Executing a method is reusing its code}$

Obvious but it is alwatys good to hear it again
- Defining method enriches the API of an object
- Calling a method is the first level of reuse


${slide:title=Study}$

[[[
inpectionPillarTree
    <inspectorPresentationOrder: 35 title: 'PillarTree'>

    ^ SpTreePresenter new 
        roots: { self };
        children: [ :aNode | aNode children ];
        display: [ :each | 
            String
                streamContents: [ :stream | 
                    stream
                        nextPutAll: each class name.
                        each class = PRHeader ifTrue: 
                            [ stream nextPutAll: '( level ';
                            nextPutAll: each level asString;
                            nextPutAll: ' )' ].
             ] ];
        yourself
]]]

Why the client of a document is forced to define this behavior?

${slide:title=Reuse is your friend!}$

Better define a method 
[[[
displayStringOn: stream
	stream
    		nextPutAll: each class name.
    		each class = PRHeader ifTrue: 
        		[ stream nextPutAll: '( level ';
				nextPutAll: each level asString;
				nextPutAll: ' )' ]
]]]

${slide:title=Reuse is your friend!}$

Call (reuse) a method!
[[[
inpectionPillarTree
    <inspectorPresentationOrder: 35 title: 'PillarTree'>
    ^ SpTreePresenter new 
        roots: { self };
        children: [ :aNode | aNode children ];
        display: [ :each | 
            String
                streamContents: [ :stream | 
                   each displayStringOn: stream ].
            ] ];
        yourself
]]]

${slide:title=Annoying logic repetition}$

[[[
...
stream := WriteStream on: (String new: 1000).
#(1 2 3) printOn: stream.
stream contents
]]]


${slide:title=streamContents: to the rescue}$

[[[
String streamContents: [:s | #(1 2 3) printOn: stream ]	
]]]

- Encapsulate creation
- Optimized
- Hide details
- Encapsulate termination

${slide:title=Encapsulate actions}$
	
[[[
SequenceableCollection class >> streamContents: blockWithArg	
	^ self new: 100 streamContents: blockWithArg

SequenceableCollection class >> new: newSize streamContents: blockWithArg
	
	| stream |
	stream := WriteStream on: (self streamSpecies new: newSize).
	blockWithArg value: stream.
	"If the write position of stream is at the end of the internal buffer of stream (originalContents),
	we can return it directly instead of making a copy as contents would do"
	^ stream position = stream originalContents size
		ifTrue: [ stream originalContents ]
		ifFalse: [ stream contents ]
]]]


${slide:title=Another example of action encapsulation}$

[[[
'tintin' asFileReference readStreamDo: [:s | s next... ]
]]]

[[[
AbstractFileReference>> readStreamDo: aBlock
	| stream |
	stream := self readStream.
	^ [ aBlock value: stream ] 
		ensure: [ stream close ]
]]]

- Initialize
- and gracefully terminates

${slide:title=Stepping back}$

- Encapsulate logic in powerful API
- Avoid spreading knowledge in clients
- Avoid duplication of logic in clients

