{
	"title":"Test-Driven Development",
	"slidesid":"M2-3"
}


${slide:title=Outline}$

- TDD (Test-Driven Development)
- An example of TDD
- Rethinking it

${slide:title=Write tests first}$

- Write test ""first""! Yes, yes, yes

- "Whenever you are tempted to type something into a print statement or a debugger expression, ""write it as a test instead""" - Martin Fowler

${slide:title=TDD is about the flow}$

+>file://figures/TDD-workflow.pdf|width=50+

${slide:title=TDD: Write your test}$

- Imagine we just created the class ==Counter==
- Testing counter value setter/getter

[[[
CounterTest >> testCount
	| c |
	c := Counter new.
	c count: 10.
	self assert: c count equals: 10
]]]

${slide:title=TDD: Run your test!}$

- It is red (the test produces an error)
-- This is normal since we did not define the methods ==count== and ==count:==
- So far so good!
- If it is already green this is a bonus but maybe your test is not good
-  Work until your test gets green!

${slide:title=TDD: Rerun *all* the tests}$

- ""Rerun all your tests""! (side effects, ...)
- Fix the broken tests
-- Either a test is now ""wrong""
-- Or you broke something else
-- In both cases, you should fix them

${slide:title=TDD: When all the tests are green}$
- Commit and take a break ;-)
- Then it is a good time to
-- ""Clean"" and ""refactor"" your code if necessary
-- Then, rerun ""all"" the tests

${slide:title=Why writing test first?}$

- You specify ""what"" you want to get in tests (executable specification)
- You think ""how you build/assemble"" to get the functionnality
- You are your first client: strengthen your APIs
- You get a ""clear"" context
- You can debug on the spot

${slide:title=Conclusion}$

- TDD is powerful
-- Solid code base
-- Fewer regressions
-- Cleaner API
- Do not miss the next lecture on XTDD
- XTDD = ""TDD on steroids"", it is gorgeous!
