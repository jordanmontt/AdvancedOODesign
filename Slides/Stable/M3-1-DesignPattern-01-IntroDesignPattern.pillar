{
    "title":"An introduction to design patterns",
        "slidesid":"M3S1"
}

${slide:title=Goal}$

- What are design patterns?
- Why they are good?
- But patterns are not panacea 
- Examples

${slide:title=Influenced by work on architecture}$

${columns}$

${column:width=30}$

+.>file://figures/timeless.png|width=80+


${column:width=70}$

C. Alexander, ''The Timeless Way of Building'', Oxford University Press, 1979
- tried to let people use patterns to build houses and cities
- developed patterns and pattern languages
- failed in architecture but the idea is successful for object-oriented design

${endColumns}$


${slide:title=Design Patterns}$

Design patterns are ""recurrent solutions to design problems""
- Identification of similar problems at ""design"" level
- Experts solved ""recurring problems"" in similar ways
- There are ""pros and cons""
- Design Patterns are literature: ""Read them!""

${slide:title=What are design patterns?}$

- ""Elegant"" solutions that a novice would not think of
- ""Generic""
- ""Independent"" of specific type system or language
- ""Well-proven""
--Successfully tested in several systems
- ""Simple""
- Can be ""combined"" together for more complex solutions


${slide:title=Watchout!}$

- There are really stupid patterns (e.g., supersuper) in some books
- Stay sceptical


${slide:title=The important points}$

Design Patterns are ""names""
- They create a design ""vocabulary""
-- Hook and Template, Factory, Composite, Visitor, Observer, Decorator...
- You can talk at lunch/blackboard about your design in an ""abstract but precise"" way
- Design patterns are literature: 
-- the books are good
-- read them, reread them, and read them again!

${slide:title=What design patterns are not}$

- A design pattern is ""not"" just one implementation
- A design pattern is ""illustrated"" using one ""possible"" implementation 
- But alternate implementations exist

${slide:title=Elements of a pattern}$

- ""Pattern name"": Increase design vocabulary
- ""Pattern intent"": Describe the goal
- ""Problem description"": When to apply it, in what context to use it
- ""Solution description"" (generic):
-- the elements that make up the design
-- their relationships, responsibilities, and collaborations
- ""Consequences"": Results and trade-offs of applying the pattern



${slide:title=Example: Strategy}$

""Intent:"" 
- Define a family of algorithms
- Encapsulate each in a separate class and 
- Define each class with the ""same"" interface so that they can be ""interchangeable""

${slide:title=Essence of Strategy}$

A possible implementation

+.>file://figures/DP-Strategy.pdf|width=100+

- Variation: Passing or not the user to the strategy?

${slide:title=Strategy application}$

+.>file://figures/DP-StrategyExample.pdf|width=90+

${slide:title=Some categories}$

""Creational Patterns""
- Instantiation and configuration of classes and objects
""Structural Patterns""
- Usage of classes and objects in larger structures, separation of interfaces and implementation
""Behavioral Patterns""
- Algorithms and division of responsibility


${slide:title=Some creational patterns}$

- ""Abstract factory"" (how to create objects)
- ""Builder"" (provide a programmatic way to create objects)
- Factory Method
- Prototype
- ""Singleton"" (watch out most people get it wrong)

${slide:title=Some structural patterns}$

- Adapter
- Bridge
- ""Composite"" (support nested structure and common api)
- Decorator
- FaÃ§ade (only useful is super limited case)
- ""Flyweight"" (how to avoid creating too many objects)
- Proxy

${slide:title=Some behavioral patterns}$

- Chain of responsibility
- ""Command"" (reify operations)
- Interpreter
- Iterator
- Mediator
- Memento
- Observer
- State
- ""Strategy"" (delegate behavior)
- ""Template Method"" (hook/template)
- ""Visitor"" (first class operation on composite)
- ""Null Object"" 

${slide:title=Alert!}$

Design Patterns are not a panacea!
- Do not apply them when you do not need them
- Design Patterns make software more complex
-- more classes
-- more indirections, more messages
- Try to understand when NOT applying them!

${slide:title=Alert!}$

- Patterns are about ""intent"" and ""tradeoffs""
- Do not confuse ""intent"" and ""implementation""

${slide:title=Some books}$

${columns}$

${column:width=30}$

+.>file://figures/Gof.png|width=50+

+.>file://figures/DesignPatternCompanion.png|width=50+

${column:width=70}$

- [Seminal one]  ""Design Patterns"" (Gamma et al), also known as GoF book (Gang of Four)
- [Really excellent] ""Smalltalk Design Pattern Companion"" (Alpert et al)

${endColumns}$


${slide:title=What readers said}$

+.>file://figures/DP-books.png|width=100+


${slide:title=Conclusion}$

""Reusable solutions to common problems based on experiences from real systems""
- Names of abstractions creating a ""common"" vocabulary for developers
- Often support ""modularity"" (separation of interface/implementation)
- A basis for frameworks and toolkits basic elements to improve reuse
