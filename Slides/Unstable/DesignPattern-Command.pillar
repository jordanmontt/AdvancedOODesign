{
    "title":"Command Design Pattern",
    "author":"S. Ducasse"
}

${slide:title=Goals}$

- Reification of actions
- Command
- Illustration with commander


${slide:title=Commands}$


${slide:title=Commander}$

+>file://figures/withMenus.png|width=85+


[[[
(EgAddContactCommand new context: aPresenter) execute
]]]

${slide:title=Add contact}$

+>file://figures/FirstDecorator.pdf|width=85+


${slide:title=Add Contact}$

[[[
EgContactBookCommand << #EgAddContactCommand
	package: 'EgContactBook'
]]]

[[[
CmAddContactCommand >> initialize
	super initialize.
	self
		basicName: 'New contact';
		basicDescription: 'Creates a new contact and add it to the contact
book.'

${slide:title=Add Contact: Behavior}$

[[[
CmAddContactCommand >> execute
	| contact |
	contact := self contactBookPresenter newContact.
	self hasSelectedContact
		ifTrue: [ self contactBook
					addContact: contact
					after: self selectedContact ]
		ifFalse: [ self contactBook addContact: contact ].
	self contactBookPresenter updateView
]]]



${slide:title=Commander Core}$

+>file://figures/DecoratorWithSpec2.pdf|width=85+

${slide:title=Commander Core Extended}$

+>file://figures/DecoratorWithSpec2.pdf|width=85+



